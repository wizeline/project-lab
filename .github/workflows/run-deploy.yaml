name: Run Deploy
on:
  repository_dispatch:
    types: [deploy]
defaults:
  run:
    shell: bash
jobs:
  deploy-branch:
    env:
      NODE_ENV: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}
          fetch-depth: 0
      - name: Get Github Branch
        id: get-branch
        run: echo ::set-output name=branch::$(echo "${{ github.event.client_payload.branch }}")
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_AWS_SECRET_ACCESS_KEY  }}
          aws-region: us-east-1
      - name: Terraform Change Workspace Lightsail
        uses: dflook/terraform-new-workspace@v1
        with:
          path: "terraform/lightsail/"
          workspace: ${{ steps.get-branch.outputs.branch }}
      - name: Terraform Apply Lightsail
        uses: dflook/terraform-apply@v1
        with:
          path: "terraform/lightsail/"
          workspace: ${{ steps.get-branch.outputs.branch }}
          auto_approve: true
      - id: get-lightsail-username
        name: Get Lightsail Instance Username
        run: echo ::set-output name=USERNAME::$(aws lightsail get-instance-access-details --instance-name project-lab-${{ steps.get-branch.outputs.branch }} | jq -r '.accessDetails.username')
      - id: get-lightsail-ip-address
        name: Get Lightsail Instance IP Address
        run: echo ::set-output name=IP_ADDRESS::$(aws lightsail get-instance-access-details --instance-name project-lab-${{ steps.get-branch.outputs.branch }} | jq -r '.accessDetails.ipAddress')
      - name: Remove existing .env file
        run: rm -rf .env
      - name: Set env-file File
        run: aws secretsmanager get-secret-value --secret-id ${{ github.event.client_payload.secret_name }} | jq -r '.SecretString' | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" > env-file
      - name: Prepare Server For Build
        uses: appleboy/ssh-action@master
        with:
          host: ${{steps.get-lightsail-ip-address.outputs.IP_ADDRESS}}
          username: ${{steps.get-lightsail-username.outputs.USERNAME}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf ~/projectlab/tmp
            mkdir -p ~/projectlab/app
            mkdir -p ~/projectlab/db
            mkdir -p ~/projectlab/tmp
      - name: Copy Files To Lightsail Instance
        uses: wlixcc/SFTP-Deploy-Action@v1.0
        with:
          username: ${{steps.get-lightsail-username.outputs.USERNAME}}
          server: ${{steps.get-lightsail-ip-address.outputs.IP_ADDRESS}}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          local_path: "./*"
          remote_path: "/home/admin/projectlab/tmp/"
          args: "-o ConnectTimeout=60"
      - name: Configure Server
        uses: appleboy/ssh-action@master
        with:
          timeout: 60s
          command_timeout: 30m
          host: ${{steps.get-lightsail-ip-address.outputs.IP_ADDRESS}}
          username: ${{steps.get-lightsail-username.outputs.USERNAME}}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            chmod +x /home/admin/projectlab/tmp/scripts/setup.sh
            /home/admin/projectlab/tmp/scripts/setup.sh ${{ steps.get-branch.outputs.branch }} ${{ secrets.LITESTREAM_AWS_ACCESS_KEY_ID }} ${{ secrets.LITESTREAM_AWS_SECRET_ACCESS_KEY }} ${{ secrets.SQLITE_DB_PATH }} ${{ secrets.LITESTREAM_S3_BUCKET }} ${{ secrets.LITESTREAM_S3_PATH }} ${{ secrets.SEED_DATA }}
            rm -rf ~/projectlab/tmp
      - name: Terraform Change Workspace Distribution
        uses: dflook/terraform-new-workspace@v1
        with:
          path: "terraform/distribution/"
          workspace: ${{ steps.get-branch.outputs.branch }}
      - name: Terraform Apply Distribution
        uses: dflook/terraform-apply@v1
        with:
          path: "terraform/distribution/"
          workspace: ${{ steps.get-branch.outputs.branch }}
          auto_approve: true
          var: lightsail_instance_ip_address=${{steps.get-lightsail-ip-address.outputs.IP_ADDRESS}}
      - name: Get Tag
        if: ${{ github.event.client_payload.update_tag == 'yes' }}
        id: get-current-tag
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF#refs/*/})
      - name: Get Previous tag
        if: ${{ github.event.client_payload.update_tag == 'yes' }}
        id: get-previous-tag
        run: |
          TAG=$(echo ${GITHUB_REF#refs/*/})
          if [ "$TAG" == "v1.0.0" ]
          then
            echo ::set-output name=tag::$(echo "v1.0.0")
          else
            echo ::set-output name=tag::$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1  --max-count=1`)
          fi
      - name: Generate ChangeLog
        if: ${{ github.event.client_payload.update_tag == 'yes'nre }}
        id: generate-change-log
        uses: Bullrich/generate-release-changelog@master
        env:
          REPO: ${{ github.repository }}
        with:
          from-tag: ${{ steps.get-previous-tag.outputs.tag }}
          to-tag: ${{ steps.get-current-tag.outputs.tag }}
          token: ${{ secrets.REPO_DISPACTH_ACCESS_TOKEN }}
      - name: Update Tag
        if: ${{ github.event.client_payload.update_tag == 'yes' }}
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.get-current-tag.outputs.tag }}
          message: ${{ steps.generate-change-log.outputs.changelog }}
          force_push_tag: true
          commitMode: true
          github_token: ${{ secrets.REPO_DISPACTH_ACCESS_TOKEN }}
