// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "orderByRelation"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model JobTitles {
  id               String     @id @default(uuid())
  name             String?
  nameAbbreviation String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  profiles         Profiles[]
}

model Locations {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  profiles  Profiles[]
}

model ProfileSkills {
  id          String   @id @default(uuid())
  profileId   String
  skillId     String
  proficiency String?
  profiles    Profiles @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  skills      Skills   @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([profileId], name: "profile_skills_profile_id_idx")
  @@index([skillId], name: "profile_skills_skill_id_idx")
}

model Profiles {
  id             String           @id @default(uuid())
  email          String           @unique
  firstName      String
  lastName       String
  searchCol      String?
  avatarUrl      String?
  locationId     String?
  jobTitleId     String?
  jobLevelTier   String?
  jobLevelTitle  String?
  department     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  terminatedAt   DateTime?
  jobTitles      JobTitles?       @relation(fields: [jobTitleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locations      Locations?       @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileSkills  ProfileSkills[]
  projectMembers ProjectMembers[]
  projects       Projects[]
  votes          Vote[]
  comments       Comments[]

  @@index([email], name: "profiles_email_idx")
  @@index([jobTitleId], name: "profiles_job_title_id_idx")
  @@index([locationId], name: "profiles_location_id_idx")
  @@index([searchCol], name: "profiles_search_col_idx")
}

model ProjectMembers {
  id              String            @id @default(uuid())
  projectId       String
  profileId       String
  hoursPerWeek    Int?
  role            String?
  active          Boolean           @default(true)
  profile         Profiles?         @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project         Projects?         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contributorPath ContributorPath[]
  practicedSkills Skills[]

  @@unique([projectId, profileId], name: "project_members_project_id_profile_id_key")
  @@index([profileId], name: "project_members_profile_id_idx")
  @@index([projectId], name: "project_members_project_id_idx")
}

model ProjectStatus {
  name     String     @id
  color    String     @default("#1d1d1d")
  projects Projects[]
}

model Category {
  name     String     @id
  projects Projects[]
}

model Projects {
  id             String           @id @default(uuid())
  ownerId        String?
  name           String           @unique
  logo           String?
  description    String?
  valueStatement String?
  target         String?
  demo           String?
  repoUrl        String?
  slackChannel   String?
  isApproved     Boolean          @default(false)
  status         String?          @default("Idea Submitted")
  categoryName   String?          @default("Experimenter")
  positions      String?
  searchSkills   String           @default("")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  owner          Profiles?        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectStatus  ProjectStatus?   @relation(fields: [status], references: [name], onDelete: SetNull, onUpdate: Cascade)
  category       Category?        @relation(fields: [categoryName], references: [name], onDelete: SetNull, onUpdate: Cascade)
  projectMembers ProjectMembers[]
  skills         Skills[]
  labels         Labels[]
  disciplines    Disciplines[]
  votes          Vote[]
  comments       Comments[]
  stages         ProjectStages[]
  isArchived     Boolean          @default(false)

  @@index([ownerId], name: "projects_owner_id_idx")
  @@index([status], name: "projects_status_idx")
  @@index([categoryName], name: "projects_category_idx")
  @@index([isArchived], name: "projects_isArchived_idx")
}

model Vote {
  projectId String
  profileId String
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile   Profiles @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, profileId])
}

model Skills {
  id             String           @id @default(uuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  profileSkills  ProfileSkills[]
  projects       Projects[]
  projectMembers ProjectMembers[]

  @@index([name], name: "skills_name_idx")
}

model Disciplines {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  projects  Projects[]

  @@index([name], name: "discipline_name_idx")
}

model Labels {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  projects  Projects[]
}

model Comments {
  id        String     @id @default(uuid())
  body      String
  authorId  String
  projectId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  parentId  String?
  project   Projects   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author    Profiles   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent    Comments?  @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children  Comments[] @relation("ParentComment")
}

model ProjectStages {
  id              String            @id @default(uuid())
  name            String
  criteria        String
  mission         String
  projectId       String
  position        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  project         Projects?         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectTasks    ProjectTasks[]
  contributorPath ContributorPath[]
}

model ProjectTasks {
  id              String            @id @default(uuid())
  description     String
  position        Int
  projectStageId  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  projectStage    ProjectStages?    @relation(fields: [projectStageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contributorPath ContributorPath[]
}

model ContributorPath {
  id              String         @id @default(uuid())
  projectTaskId   String
  projectMemberId String
  projectStageId  String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  projectMember   ProjectMembers @relation(fields: [projectMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectTask     ProjectTasks   @relation(fields: [projectTaskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectStage    ProjectStages  @relation(fields: [projectStageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
