// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model JobTitles {
  id               String     @id @default(uuid())
  name             String?
  nameAbbreviation String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  profiles         Profiles[]
}

model Locations {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  profiles  Profiles[]
}

model ProfileSkills {
  id          String   @id @default(uuid())
  profileId   String
  skillId     String
  proficiency String?
  profiles    Profiles @relation(fields: [profileId], references: [id])
  skills      Skills   @relation(fields: [skillId], references: [id])

  @@index([profileId], name: "profile_skills_profile_id_idx")
  @@index([skillId], name: "profile_skills_skill_id_idx")
}

model Profiles {
  id             String           @id @default(uuid())
  email          String           @unique
  firstName      String
  lastName       String
  searchCol      String?
  avatarUrl      String?
  locationId     String?
  jobTitleId     String?
  jobLevelTier   String?
  jobLevelTitle  String?
  department     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  terminatedAt   DateTime?
  jobTitles      JobTitles?       @relation(fields: [jobTitleId], references: [id])
  locations      Locations?       @relation(fields: [locationId], references: [id])
  profileSkills  ProfileSkills[]
  projectMembers ProjectMembers[]
  projects       Projects[]

  @@index([email], name: "profiles_email_idx")
  @@index([jobTitleId], name: "profiles_job_title_id_idx")
  @@index([locationId], name: "profiles_location_id_idx")
  @@index([searchCol], name: "profiles_search_col_idx")
}

model ProjectMembers {
  id        String    @id @default(uuid())
  projectId String
  profileId String
  startDate DateTime?
  endDate   DateTime?
  role      String?
  status    String?
  profiles  Profiles  @relation(fields: [profileId], references: [id])
  projects  Projects  @relation(fields: [projectId], references: [id])

  @@unique([projectId, profileId], name: "project_members_project_id_profile_id_key")
  @@index([profileId], name: "project_members_profile_id_idx")
  @@index([projectId], name: "project_members_project_id_idx")
}

model ProjectSkills {
  id        String   @id @default(uuid())
  projectId String
  skillId   String
  projects  Projects @relation(fields: [projectId], references: [id])
  skills    Skills   @relation(fields: [skillId], references: [id])

  @@index([projectId], name: "project_skills_project_id_idx")
  @@index([skillId], name: "project_skills_skill_id_idx")
}

model ProjectStatus {
  name     String     @id
  projects Projects[]
}

model Projects {
  id             String           @id @default(uuid())
  ownerId        String?
  name           String
  logo           String?
  description    String?
  valueStatement String?
  target         String?
  demo           String?
  repoUrl        String?
  isApproved     Boolean          @default(false)
  status         String?          @default("Draft")
  positions      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  profiles       Profiles?        @relation(fields: [ownerId], references: [id])
  projectStatus  ProjectStatus?   @relation(fields: [status], references: [name])
  projectMembers ProjectMembers[]
  projectSkills  ProjectSkills[]

  @@index([ownerId], name: "projects_owner_id_idx")
  @@index([status], name: "projects_status_idx")
}

model Skills {
  id            String          @id @default(uuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  profileSkills ProfileSkills[]
  projectSkills ProjectSkills[]

  @@index([name], name: "skills_name_idx")
}
